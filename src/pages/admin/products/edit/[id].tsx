import { GetServerSideProps } from "next";
import { ParsedUrlQuery } from "querystring";
import { useEffect, useState } from "react";
import { useProduct } from "../../../../hooks/useProducts";

import { useRouter } from "next/router";

import { useForm } from "react-hook-form";

import * as yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";

import styles from "./styles.module.scss";

import {
  Box,
  Button,
  Divider,
  Flex,
  Heading,
  SimpleGrid,
  VStack,
} from "@chakra-ui/react";
import Header from "../../../../components/Header";
import { toast, ToastContainer } from "react-toastify";
import { Input } from "../../../../components/Form/Input";

import Head from "next/head";

interface IParams extends ParsedUrlQuery {
  id: string;
}

interface ProductProps {
  id: number;
  name: string;
  description: string;
  price: string;
  image: string;
  category: string;
  updatedAt: string;
}

interface UpdateProductFormData {
  name: string;
  description: string;
  price: string;
  image: string;
  category: string;
  updatedAt: string;
}

export default function EditProduct({ id }: IParams) {
  const [product, setProduct] = useState<ProductProps>();
  const [file, setFile] = useState();

  const onFileChange = (e) => {
    setFile(e.target.files[0]);
  };

  const router = useRouter();

  const { data } = useProduct(id);

  const createProductFormSchema = yup.object().shape({
    name: yup.string().required("Name is required"),
    description: yup.string().required("Description is required"),
    price: yup.string().required("Price is required"),
    image: yup.string().notRequired(),
    category: yup.string().notRequired(),
  });

  const {
    register,
    handleSubmit,
    setValue,
    formState: { errors, isSubmitting },
  } = useForm<UpdateProductFormData>({
    resolver: yupResolver(createProductFormSchema),
  });

  useEffect(() => {
    if (data) {
      setProduct(data);
    }

    if (product) {
      setValue("name", product.name);
      setValue("description", product.description);
      setValue("price", product.price);
      setValue("image", product.image);
      setValue("category", product.category);
      setValue(
        "updatedAt",
        new Date(product.updatedAt).toLocaleDateString("pt-br", {
          day: "2-digit",
          month: "2-digit",
          year: "numeric",
        })
      );
    }
  }, [data, product]);

  const handleDelete = async (productId) => {
    await fetch(`/api/products/delete?id=${id}`, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(productId),
    });

    toast.success("Product deleted successfully");

    router.push("/admin/products");
  };

  const handleUpdateProduct = async (values: UpdateProductFormData) => {
    const formData = new FormData();

    formData.append("name", values.name);
    formData.append("price", values.price);
    formData.append("description", values.description);
    formData.append("image", file);
    formData.append("category", values.category);

    try {
      await fetch(`/api/products/update?id=${id}`, {
        method: "PUT",
        body: formData,
      });

      router.push("/admin/products");
    } catch (error) {
      toast.error("Error updating product");
    }
  };

  return (
    <>
      <Head>
        <title>Admin</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box>
        <Header />

        <ToastContainer position="bottom-center" />

        <Flex w="100%" my="6" maxWidth={1480} mx="auto" px={["4", "6"]}>
          <Box
            as="form"
            flex="1"
            borderRadius="8"
            bg="gray.800"
            p={["6", "8"]}
            onSubmit={handleSubmit(
              async (values) => await handleUpdateProduct(values)
            )}
          >
            <Heading size="lg" fontWeight="normal">
              Edit Product
            </Heading>

            <Divider my="6" borderColor="gray.700" />

            <VStack spacing="8">
              <SimpleGrid
                minChildWidth="240px"
                spacing={["6", "8"]}
                w="100%"
                alignItems="center"
                display="flex"
                flexDirection="column"
              >
                <Input
                  label="Product Name"
                  error={errors.name}
                  {...register("name")}
                />
                <Flex w="100%" alignItems="center" display="flex" gap="10">
                  <Input
                    label="Price"
                    error={errors.price}
                    {...register("price")}
                  />
                  <Input
                    label="Category"
                    error={errors.category}
                    {...register("category")}
                  />
                </Flex>

                <Input
                  as="textarea"
                  h="100px"
                  label="Product Description"
                  error={errors.description}
                  {...register("description")}
                />

                <label htmlFor="input" className={styles.labelFile}>
                  Send File
                </label>
                <input
                  id="input"
                  name="input"
                  type="file"
                  onChange={onFileChange}
                  className={styles.inputFile}
                />
              </SimpleGrid>
            </VStack>

            <VStack spacing="8" mt="8">
              <SimpleGrid minChildWidth="240px" spacing={["6", "8"]} w="100%">
                <Button
                  colorScheme="red"
                  size="lg"
                  onClick={(e) => handleDelete(id)}
                >
                  Delete
                </Button>
                <Button as="a" colorScheme="whiteAlpha" href="/admin/products">
                  Cancel
                </Button>
                <Button
                  type="submit"
                  colorScheme="pink"
                  isLoading={isSubmitting}
                >
                  Save
                </Button>
              </SimpleGrid>
            </VStack>
          </Box>
        </Flex>
      </Box>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async ({ params }) => {
  const { id } = params as IParams;

  return {
    props: {
      id,
    },
  };
};
