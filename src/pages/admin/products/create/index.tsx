import {
  Box,
  Button,
  Divider,
  Flex,
  Heading,
  HStack,
  SimpleGrid,
  VStack,
} from "@chakra-ui/react";
import { yupResolver } from "@hookform/resolvers/yup";
import Link from "next/link";
import { useRouter } from "next/router";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { toast, ToastContainer } from "react-toastify";
import * as yup from "yup";
import { Input } from "../../../../components/Form/Input";
import Header from "../../../../components/Header";
import Sidebar from "../../../../components/Sidebar";

import styles from "./styles.module.scss";

import Head from "next/head";

interface CreateProductFormData {
  id: number;
  name: string;
  description: string;
  price: string;
  image: string;
  category: string;
}

const createProductFormSchema = yup.object().shape({
  name: yup.string().required("Name is required"),
  description: yup.string().required("Description is required"),
  price: yup.string().required("Price is required"),
  image: yup.string().notRequired(),
  category: yup.string().notRequired(),
});

export default function CreateProduct() {
  const [file, setFile] = useState();

  const onFileChange = (e) => {
    setFile(e.target.files[0]);
  };

  const router = useRouter();

  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm<CreateProductFormData>({
    resolver: yupResolver(createProductFormSchema),
  });

  async function handleCreateProduct(data: CreateProductFormData) {
    const formData = new FormData();

    formData.append("name", data.name);
    formData.append("price", data.price);
    formData.append("description", data.description);
    formData.append("image", file);
    formData.append("category", data.category);

    try {
      await fetch("/api/products/products", {
        method: "POST",
        body: formData,
      });
    } catch (error) {
      toast.error(error);
    }

    toast.success("Product created successfully");

    router.push("/admin/products");
  }

  return (
    <>
      <Head>
        <title>Admin</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Flex direction="column" h="100vh">
        <Header />
        <ToastContainer position="bottom-center" />

        <Flex w="100%" my="6" maxWidth={1480} mx="auto" px={["4", "6"]}>
          <Sidebar />
          <Box
            as="form"
            flex="1"
            borderRadius="8"
            bg="gray.800"
            p={["6", "8"]}
            onSubmit={handleSubmit(
              async (values) => await handleCreateProduct(values)
            )}
          >
            <Heading size="lg" fontWeight="normal">
              Register Product
            </Heading>

            <Divider my="6" borderColor="gray.700" />

            <VStack spacing="8">
              <SimpleGrid
                minChildWidth="240px"
                spacing={["6", "8"]}
                w="100%"
                alignItems="center"
                display="flex"
                flexDirection="column"
              >
                <Input
                  label="Product Name"
                  error={errors.name}
                  {...register("name")}
                />
                <Flex w="100%" alignItems="center" display="flex" gap="10">
                  <Input
                    label="Price"
                    error={errors.price}
                    {...register("price")}
                  />
                  <Input
                    label="Category"
                    error={errors.category}
                    {...register("category")}
                  />
                </Flex>

                <Input
                  as="textarea"
                  h="100px"
                  label="Product Description"
                  error={errors.description}
                  {...register("description")}
                />

                <label htmlFor="input" className={styles.labelFile}>
                  Send File
                </label>
                <input
                  id="input"
                  name="input"
                  type="file"
                  onChange={onFileChange}
                  className={styles.inputFile}
                />
              </SimpleGrid>
            </VStack>

            <Flex mt="8">
              <HStack spacing="4">
                <Link href="/admin/products" passHref legacyBehavior>
                  <Button as="a" colorScheme="whiteAlpha">
                    Cancel
                  </Button>
                </Link>
                <Button
                  type="submit"
                  colorScheme="pink"
                  isLoading={isSubmitting}
                >
                  Confirm
                </Button>
              </HStack>
            </Flex>
          </Box>
        </Flex>
      </Flex>
    </>
  );
}
